import os
from flask import jsonify
from pinecone import Pinecone, ServerlessSpec
from dotenv import load_dotenv
from langchain_huggingface.embeddings import HuggingFaceEmbeddings
# from langchain_pinecone import PineconeVectorStore
# from langchain.embeddings import OpenAIEmbeddings


load_dotenv()
pinecone=Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
environment=os.getenv("PINECONE_ENVIRONMENT")
index_name = os.getenv("PINECONE_INDEX_NAME")


if index_name not in pinecone.list_indexes().names():
    pinecone.create_index(
        name=index_name,
        dimension=768,
        metric="cosine",
        spec=ServerlessSpec(
            cloud='aws', 
            region='us-east-1'
        ) 
    )
index = pinecone.Index(index_name)

# def generate_vectors(texts, embeddings):
#     vectorstore_from_texts = PineconeVectorStore.from_texts(
#         texts,
#         index_name=index_name,
#         embedding=embeddings
#     )
#     return vectorstore_from_texts


def upsert_vectors(vectors):
    index.upsert(vectors,
    namespace="vector")
    print(index.describe_index_stats())

def query_pinecone(model_name, query, top_k=100):
    embedding_model = HuggingFaceEmbeddings(model_name=model_name)
    # embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")
    # embedding_model = OpenAIEmbeddings(api_key=os.getenv("OPENAI_API_KEY"))
    query_vector = embedding_model.embed_query(query)
    results = index.query(vector=[query_vector], top_k=top_k, namespace="vector", include_metadata=True)

    if results is None:
        return "No results found"

    # Ensure results is a serializable format
    try:
        # If results is a complex object, convert it to a dict or list here
        # matches = [
        #     {"id": match["id"], "score": match["score"], "text": match["metadata"]["text"]}
        #     for match in results["matches"]
        # ]
        serialized_results = {"matches": [match.to_dict() for match in results.matches]}
        return serialized_results
    except Exception as e:
        return str(e)





# embeddings = OpenAIEmbeddings()
# embedding_model = HuggingFaceEmbeddings(model_name=model_name)


# pinecone_store = PineconeVectorStore.from_documents(
#     documents= documents,
#     embedding=embeddings,
#     index_name=index_name
# )
 
